# Modifier Info

# Modifiers:
	# Buffers:
		#readonly <- Default and will be added Implicitly
		#readwrite
		#init <- Evaluate on start instead of when called.
	# Scripts(and Functions):
		#nojump <- Defines that this script/function is not available for use with instruction jmp
		#nocall <- Defines that this script/function is not available for use as parameter
		#once <- Defines that this script/function is computed once and cached
		#init <- Defines that this script/function is computed once at the beginning of execution. (Implicitly Declares "once" keyword)
	# Functions:
		#dynamic <- Default and will be added implicitly
		#statc <- Defines that this function does not have access to any script or buffer and is entirely selfcontained. Requires nojump keyword.
		#once <- Same as Script but requires the function to be "static"
		#init <- Same as Script but requires the function to be "static"


#Examples
#Example Buffer define for demonstation
--define texture testrandom: urnd



#Using ExtPP to use (and apply) conditional expressions when loading the source
#~define STATIC
#~define INIT

#Uncomment this to demonstrate invalid use.
#~define INVALID

Main:
	set Test #Setup Code


~if STATIC

	Test: static #Static function. Implicit: nojump. Does not have access to Buffers/scripts/..
		setactive 3
		setv 1
		setactive 0 1 2

		~if INVALID
			set testrandom # <- This is invalid as we are referencing a function/buffer/script
		~else
			#Correct way of making random noise with a static function
			urnd
		~endif

~elseif INIT

	#INIT: Evaluated at program Start.
	#Implicit Modifiers: once static nojump

	Test: init
		setactive 3
		setv 1
		setactive 0 1 2

		~if INVALID
			set testrandom # <- This is invalid as we are referencing a function/buffer/script
		~else
			#Correct way of making random noise with a static function
			urnd
		~endif

~else 

	~if INVALID

		# Make use of the Exception Plugin for ExtPP to issue warnings or errors in the preprocessing step
		~error Do not use the define "INVALID"  when no other defines are set. There is no invalid example for the default case.

	~endif

	#DEFAULT CASE: Dynamic Function
	#Implicit Modifiers: dynamic
	Test: 
		setactive 3
		setv 1
		setactive 0 1 2
		set testrandom # <- This is valid because the function is declared dynamic(in this case implicitly)


~endif